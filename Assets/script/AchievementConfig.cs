// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;

public class AchievementConfig
{
	AchievementConfig()
	{
		string [] names = {
			"new",
			"waning",
			"crescent",
			"third quarter",
			"waning gibbous",
			"full",
			"waxing gibbous",
			"first quarter",
			"waxing cresent"
		};

		for (int i = 1; i <= 8; ++i) {
			AchieveItem achieveItem = new AchieveItem();
			achieveItem.condition = Condition.CLEAR_BY_TYPE;
			achieveItem.id = i;
			achieveItem.name = names[i-1];
			achieveItem.parameters = new int[]{i - 1};

			_achieveItems[achieveItem.id] = achieveItem;
			_achieveItemList.Add(achieveItem);
		}

		foreach (AchieveItem achieveItem in _achieveItemList) {
			if (_achieveGroupByConditon[achieveItem.condition] == null) {
				_achieveGroupByConditon[achieveItem.condition] = new ArrayList();
			}

			ArrayList achievesOnThisCondition = (ArrayList)_achieveGroupByConditon[achieveItem.condition];
			achievesOnThisCondition.Add(achieveItem);
		}
	}

	public class AchieveItem {
		public int id;
		public string name;
		public Condition condition;
		public int[] parameters;
	}

	private List<AchieveItem> _achieveItemList = new List<AchieveItem>();
	private Hashtable _achieveItems = new Hashtable();
	private Hashtable _achieveGroupByConditon = new Hashtable();

	private static AchievementConfig _instance;

	public static AchievementConfig instance() {
		if (_instance == null) {
			_instance = new AchievementConfig();
		}

		return _instance;
	}

	public enum Condition {
		CLEAR_BY_TYPE,
		COUNT
	}

	public List<int> checkAchieve(Condition condition, int[] achieveParams, HashSet<int> finishedAchieves) {		
		List<int> justFinishedAchieveIds = new List<int>();
		ArrayList achievesOnThisCondition = (ArrayList)_achieveGroupByConditon[condition];
		if (achievesOnThisCondition == null) {
			return justFinishedAchieveIds;
		}

		if (condition == Condition.CLEAR_BY_TYPE) {
			foreach (AchieveItem item in achievesOnThisCondition) {
				if (achieveParams[0] == item.parameters[0]) {
					if (!finishedAchieves.Contains(item.id)) {
						finishedAchieves.Add(item.id);
						justFinishedAchieveIds.Add(item.id);
					}
				}
			}
		}

		return justFinishedAchieveIds;
	}

	public AchieveItem getAchieveConfigItem(int id) {
		return (AchieveItem)_achieveItems[id];
	}

	public int getAchieveItemCount() {
		return _achieveItemList.Count;
	}

	public AchieveItem getAchieveItemByIndex(int index) {
		if (index < 0 || index >= _achieveItemList.Count) {
			return null;
		}

		return _achieveItemList[index];
	}
}

